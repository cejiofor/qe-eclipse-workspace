package com.perscholas.springmvcjdbctemplate.repositories.impl;

import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import com.perscholas.springmvcjdbctemplate.model.Course;
import com.perscholas.springmvcjdbctemplate.repositories.CourseRepository;
import com.perscholas.springmvcjdbctemplate.repositories.StudentRepository;

@Repository("mariaDbCourseRepository")
public class MariaDbCourseRepository implements CourseRepository {
	@Autowired
	private NamedParameterJdbcTemplate mariaDbJdbcTemplate;
	@Autowired
	private StudentRepository studentRepository;
	
	@Override
	public Integer createCourse(Course course) {
		System.out.println("Course Repository createCourse method.");
		Integer id = -1;
		/* The class MapSqlParameterSource behaves much like a Map and holds 
		 * key-value pairs. The keys can be included in a query string to 
		 * accept values associated with the keys such as illustrated in the 
		 * "createCourseSql" string below. */
		MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue("code", course.getCode());
		params.addValue("name", course.getName());
		params.addValue("maxSize", course.getMaxSize());
		String createCourseSql = "insert into courses (code, name, max_size) values "
				+ "(:code,:name, :maxSize)";
		/* The KeyHolder instance will receive the primary key generated by 
		 * the database.*/
		KeyHolder keyHolder = new GeneratedKeyHolder();
		Integer createResult = mariaDbJdbcTemplate.update(createCourseSql, 
				params, keyHolder);
		/* The JdbcTemplate "update" method returns the number of rows 
		 * affected. If the number is 0, then it indicates the insert 
		 * attempt failed. */
		if (createResult > 0) {
			/* The Database returns a BigInteger that needs to be cast to an 
			 * int or Integer. */
			id = keyHolder.getKey().intValue();
		}
		return id;
	}
	@Override
	public Course getCourseById(Integer id) throws SQLException {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		String selectCourseById = "select * from courses where course_id = :id";
		Course course = null;
		try
		{
			/* The JdbcTemplate method "queryForObject" accepts a 
			 * query string, a parameter source which in this case is a Map, 
			 * and an instance of the class "CourseMapper".  The CourseMapper 
			 * method "mapRow" returns a Course instance, but the "queryForObject" 
			 * method returns an Object type. Therefore, the Object must be
			 * cast to the "Course" type. */
			course = (Course)mariaDbJdbcTemplate.queryForObject(
					selectCourseById, params, new CourseMapper());
			course.setRoster(studentRepository.getStudentsByCourseId(course.getCourseId()));
		}
		catch (EmptyResultDataAccessException e)
		{
			e.getMessage();
		}
		return course;
	}
	@Override
	public List<Course> getCoursesByStudentId(Integer studentId) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", studentId);
		String coursesByStudentSql = "select c.course_id, c.code, c.name, "
				+ "c.max_size from course_enrollments ce join courses c on "
				+ "ce.courses_course_id = c.course_id where "
				+ "ce.students_student_id = :id";
		List<Course> result = mariaDbJdbcTemplate.query(coursesByStudentSql, 
				params, new CourseMapper());
		return result;
	}
	@Override
	public List<Course> getAllCourses() throws ClassNotFoundException, IOException, SQLException {
		String selectCourses = "SELECT * FROM courses";
		/* The JdbcTemplate "query" method accepts a query string and an instance 
		 * of the class "CourseMapper". It will map each row of the ResultSet 
		 * and add it to a List of "Course" type which will get assigned to 
		 * the List<Course> named "result" */
		List<Course> result = mariaDbJdbcTemplate.query(selectCourses, 
				new CourseMapper());
		return result;
	}
	@Override
	public Integer enrollInCourse(Integer studentId, Integer courseId) {
		Integer id = -1;
		MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue("studentId", studentId);
		params.addValue("courseId", courseId);
		String createCourseEnrollSql = "insert into course_enrollments "
				+ "(students_student_id, courses_course_id) values "
				+ "(:studentId,:courseId)";
		KeyHolder keyHolder = new GeneratedKeyHolder();
		Integer createResult = mariaDbJdbcTemplate.update(createCourseEnrollSql, 
				params, keyHolder);
		if (createResult > 0) {
			id = keyHolder.getKey().intValue();
		}
		return id;
	}
	@Override
	public Boolean updateCourse(Course course) {
		System.out.println("Course Repository updateCourse method.");
		Integer result;
		Map<String, Object> params = new HashMap<>();
		params.put("code", course.getCode());
		params.put("name", course.getName());
		params.put("maxSize",course.getMaxSize());
		params.put("id", course.getCourseId());
		String updateSql = "update courses set code = :code, name "
				+ "= :name, max_size = :maxSize where course_id = :id";
		result = mariaDbJdbcTemplate.update(updateSql, params);
		if (result > 0) {
			return true;
		}
		return false;
	}
	@Override
	public Boolean deleteCourse(Integer courseId) {
		System.out.println("Course Repository deleteCourse.");
		Integer result;
		String deleteSql = "delete from courses where course_id = :id";
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", courseId);
		result = mariaDbJdbcTemplate.update(deleteSql, params);
		if (result > 0) {
			return true;
		}
		return false;
	}
	@Override
	public Boolean removeStudentFromCourse(Integer courseId, Integer studentId) {
		Integer result;
		String removeSql = "delete from course_enrollments where courses_course_id "
				+ "= :courseId and students_student_id = :studentId";
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("courseId", courseId);
		params.put("studentId", studentId);
		result = mariaDbJdbcTemplate.update(removeSql, params);
		if (result > 0) {
			return true;
		}
		return false;
	}
	private final class CourseMapper implements RowMapper<Course> {
		@Override
		public Course mapRow(ResultSet rs, int rowNum) throws SQLException {
			Course course = new Course();
			course.setCourseId(rs.getInt(1));
			course.setCode(rs.getString(2));
			course.setName(rs.getString(3));
			course.setMaxSize(rs.getInt(4));
			return course;
		}
	}
}