package com.perscholas.classifieds.repositories.impl;

import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import com.perscholas.classifieds.models.User;
import com.perscholas.classifieds.repositories.UserRepository;

public class MariaDbUserRepository implements UserRepository{
	@Autowired
	private NamedParameterJdbcTemplate mariaDbJdbcTemplate;

	@Override
	public Integer createUser(User user) {
		Integer id = -1;
		/* The class MapSqlParameterSource behaves much like a Map and holds 
		 * key-value pairs. The keys can be included in a query string to 
		 * accept values associated with the keys such as illustrated in the 
		 * "createStudentSql" string below. */
		MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue("name", user.getName());
		params.addValue("email", user.getPassword());
		String createUserSql = "insert into users (name, password) values "
				+ "(:name,:password)";
		/* The KeyHolder instance will receive the primary key generated by 
		 * the database.*/
		KeyHolder keyHolder = new GeneratedKeyHolder();
		Integer createResult = mariaDbJdbcTemplate.update(createUserSql, 
				params, keyHolder);
		/* The JdbcTemplate "update" method returns the number of rows 
		 * affected. If the number is 0, then it indicates the insert 
		 * attempt failed. */
		if (createResult > 0) {
			/* The database returns a BigInteger that needs to be cast to an 
			 * int or Integer. */
			id = keyHolder.getKey().intValue();
		}
		return id;
	}

	@Override
	public User getUserById(Integer id) throws SQLException {
		String selectUsersById = "select * from uses where user_id = :id";
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		User user = null;
		try
		{
			/* The JdbcTemplate method "queryForObject" accepts a 
			 * query string, a parameter source which in this case is a Map, 
			 * and an instance of the class "StudentMapper".  The StudentMapper 
			 * method "mapRow" returns a Student instance, but the "queryForObject" 
			 * method returns an Object type. Therefore, the Object must be
			 * cast to the "Student" type. */
			user = (User)mariaDbJdbcTemplate.queryForObject(
					selectUsersById, params, new UserMapper());
		}
		catch (EmptyResultDataAccessException e)
		{
			System.out.println(e.getMessage());
		}
		return user;
	}

	@Override
	public List<User> getAllUsers() throws ClassNotFoundException, IOException, SQLException {
		String selectUsers = "SELECT * FROM users";
		/* The JdbcTemplate "query" method accepts a query string and an instance 
		 * of the class "StudentMapper". It will map each row of the ResultSet 
		 * and add it to a List of "Student" type which will get assigned to 
		 * the List<Student> named "result" */
		List<User> result = mariaDbJdbcTemplate.query(selectUsers, new UserMapper());
		return result;
	}

	@Override
	public Boolean updateUser(User user) {
		Integer result;
		Map<String, Object> params = new HashMap<>();
		params.put("name", user.getName());
		params.put("password", user.getPassword());
		params.put("id", user.getUserId());
		String updateSql = "update users set name = :name, password = :password where user_id = :id";
		result = mariaDbJdbcTemplate.update(updateSql, params);
		if (result > 0) {
			return true;
		}
		return false;
	}

	@Override
	public Boolean deleteUser(Integer userId) {
		Integer result;
		String deleteSql = "delete from users where user_id = :id";
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", userId);
		result = mariaDbJdbcTemplate.update(deleteSql, params);
		if (result > 0) {
			return true;
		}
		return false;
	}
	
	private final class UserMapper implements RowMapper<User> {
		@Override
		public User mapRow(ResultSet rs, int rowNum) throws SQLException {
			User user = new User();
			user.setUserId(rs.getInt(1));
			user.setName(rs.getString(2));
			user.setPassword(rs.getString(3));
			return user;
		}
	}
	
	
	
}