package com.perscholas.classifieds.repositories.impl;

import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import com.perscholas.classifieds.models.Add;
import com.perscholas.classifieds.repositories.AddRepository;
import com.perscholas.classifieds.repositories.UserRepository;

public class MariaDbAddRepository implements AddRepository{
	@Autowired
	private NamedParameterJdbcTemplate mariaDbJdbcTemplate;
	@Autowired
	private UserRepository userRepository;
	
	@Override
	public Integer createAdd(Add add) {
		System.out.println("Add Repository createAdd method.");
		Integer id = -1;
		/* The class MapSqlParameterSource behaves much like a Map and holds 
		 * key-value pairs. The keys can be included in a query string to 
		 * accept values associated with the keys such as illustrated in the 
		 * "createCourseSql" string below. */
		MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue("item", add.getItem());
		params.addValue("price", add.getPrice());
		params.addValue("available", add.getAvailable());
		String createAddSql = "insert into adds (item, price, available) values "
				+ "(:item,:price,:available)";
		/* The KeyHolder instance will receive the primary key generated by 
		 * the database.*/
		KeyHolder keyHolder = new GeneratedKeyHolder();
		Integer createResult = mariaDbJdbcTemplate.update(createAddSql, params, keyHolder);
		/* The JdbcTemplate "update" method returns the number of rows 
		 * affected. If the number is 0, then it indicates the insert 
		 * attempt failed. */
		if (createResult > 0) {
			/* The Database returns a BigInteger that needs to be cast to an 
			 * int or Integer. */
			id = keyHolder.getKey().intValue();
		}
		return id;
	}

	@Override
	public Add getAddById(Integer id) throws SQLException {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		String selectAddById = "select * from adds where add_id = :id";
		Add add = null;
		try
		{
			/* The JdbcTemplate method "queryForObject" accepts a 
			 * query string, a parameter source which in this case is a Map, 
			 * and an instance of the class "CourseMapper".  The CourseMapper 
			 * method "mapRow" returns a Course instance, but the "queryForObject" 
			 * method returns an Object type. Therefore, the Object must be
			 * cast to the "Course" type. */
			add = (Add)mariaDbJdbcTemplate.queryForObject(selectAddById, params, new AddMapper());
//			course.setRoster(studentRepository.getStudentsByCourseId(course.getCourseId()));
		}
		catch (EmptyResultDataAccessException e)
		{
			e.getMessage();
		}
		return add;
	}

	@Override
	public List<Add> getAllAdds() throws ClassNotFoundException, IOException, SQLException {
		String selectAdds = "SELECT * FROM adds";
		/* The JdbcTemplate "query" method accepts a query string and an instance 
		 * of the class "CourseMapper". It will map each row of the ResultSet 
		 * and add it to a List of "Course" type which will get assigned to 
		 * the List<Course> named "result" */
		List<Add> result = mariaDbJdbcTemplate.query(selectAdds, new AddMapper());
		return result;
	}

	@Override
	public Boolean updateAdd(Add add) {
		System.out.println("Add Repository updateAdd method.");
		Integer result;
		Map<String, Object> params = new HashMap<>();
		params.put("item", add.getItem());
		params.put("price", add.getPrice());
		params.put("available",add.getAvailable());
		params.put("id", add.getAddId());
		String updateSql = "update courses set item = :item, price "
				+ "= :price, available = :available where add_id = :id";
		result = mariaDbJdbcTemplate.update(updateSql, params);
		if (result > 0) {
			return true;
		}
		return false;
	}

	@Override
	public Boolean deleteAdd(Integer addId) {
		System.out.println("Add Repository deleteAdd");
		Integer result;
		String deleteSql = "delete from courses where add_id = :id";
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", addId);
		result = mariaDbJdbcTemplate.update(deleteSql, params);
		if (result > 0) {
			return true;
		}
		return false;
	}
	
	private final class AddMapper implements RowMapper<Add> {
		@Override
		public Add mapRow(ResultSet rs, int rowNum) throws SQLException {
			Add add = new Add();
			add.setAddId(rs.getInt(1));
			add.setItem(rs.getString(2));
			add.setPrice(rs.getDouble(3));
			add.setAvailable(rs.getBoolean(4));
			return add;
		}
	}
}
